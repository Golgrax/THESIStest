name: Build Petwatch Kivy APK

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Debug Repository Files
        run: |
          echo "Current working directory: $(pwd)"
          echo "Files in repository root:"
          ls -la

      - name: Ensure `buildozer.spec` Exists
        run: |
          if [ ! -f "buildozer.spec" ]; then
            echo "❌ ERROR: buildozer.spec is missing in repository root! Make sure it's committed."
            exit 1
          else
            echo "✅ buildozer.spec found. Proceeding."
          fi

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install System Dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            pkg-config automake m4 git zip unzip python3-pip autoconf libtool \
            libffi-dev pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev \
            libtinfo6 cmake libssl-dev libtool-bin
          pip install --upgrade pip setuptools

      - name: Install Buildozer & Dependencies
        run: |
          pip install --upgrade Cython==0.29.36
          pip install --upgrade buildozer
          buildozer --version

      - name: Set up Android SDK and NDK
        run: |
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/tools/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH
          mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
          cd $ANDROID_SDK_ROOT/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip -d $ANDROID_SDK_ROOT/cmdline-tools
          mv $ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools $ANDROID_SDK_ROOT/cmdline-tools/latest
          rm cmdline-tools.zip
          echo "y" | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --install "platforms;android-31" "build-tools;33.0.2" "ndk;21.4.7075529"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/tools/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH" >> $GITHUB_ENV

      - name: Patch libffi
        run: |
          # Create p4a directory structure
          mkdir -p .buildozer/android/platform
          
          # Clone python-for-android
          git clone --depth 1 https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android
          
          # Create patch file to fix libffi configure.ac
          cat > libffi_patch.diff << 'EOF'
          diff --git a/configure.ac b/configure.ac
          index xxxx..yyyy 100644
          --- a/configure.ac
          +++ b/configure.ac
          @@ -1,5 +1,6 @@
          AC_INIT([libffi], [3.4.4])
          AC_CONFIG_HEADERS([fficonfig.h])
          +LT_INIT
          
          m4_pattern_allow([LT_SYS_SYMBOL_USCORE])
          EOF
          
          # Create script to apply patch
          cat > patch_libffi.sh << 'EOF'
          #!/bin/bash
          set -e
          if [ -d "$1" ]; then
            cd "$1"
            if [ -f "configure.ac" ]; then
              echo "Patching libffi configure.ac"
              # Add LT_INIT near the beginning and pattern_allow
              sed -i '3i LT_INIT' configure.ac
              sed -i '4i m4_pattern_allow([LT_SYS_SYMBOL_USCORE])' configure.ac
              echo "Patched configure.ac"
            else
              echo "No configure.ac found in $1"
            fi
          else
            echo "Directory $1 not found"
          fi
          EOF
          
          chmod +x patch_libffi.sh
          
          # Create a hook to run the patch script
          mkdir -p .buildozer/android/platform/python-for-android/pythonforandroid/recipes/libffi/
          
          cat > .buildozer/android/platform/python-for-android/pythonforandroid/recipes/libffi/pre_build_hook.py << 'EOF'
          import os
          import subprocess
          
          def pre_build_hook(recipe, arch):
              print("Running libffi pre-build hook")
              recipe_dir = recipe.get_build_dir(arch.arch)
              patch_script = os.path.join(os.environ['GITHUB_WORKSPACE'], 'patch_libffi.sh')
              subprocess.call([patch_script, recipe_dir])
          EOF

      - name: Modify buildozer.spec
        run: |
          # Remove libffi from requirements if present
          if grep -q "libffi" buildozer.spec; then
            sed -i 's/,libffi//g' buildozer.spec
            echo "Removed libffi from requirements"
          fi
          
          # Ensure we're using latest p4a
          if grep -q "^p4a.branch" buildozer.spec; then
            sed -i 's/^p4a.branch.*/p4a.branch = master/g' buildozer.spec
          else
            echo "p4a.branch = master" >> buildozer.spec
          fi
          
          # Enable verbose output for debugging
          if grep -q "^log_level" buildozer.spec; then
            sed -i 's/^log_level.*/log_level = 2/g' buildozer.spec
          else
            echo "log_level = 2" >> buildozer.spec
          fi

      - name: Build APK
        run: |
          buildozer android debug

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: Kivy-APK
          path: bin/*.apk
